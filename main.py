import os
import sqlite3
import logging
import asyncio
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
API_TOKEN = os.environ.get("TELEGRAM_API_TOKEN" )
if not API_TOKEN:
    raise ValueError("No API token provided. Set the TELEGRAM_API_TOKEN environment variable.")


# States
class UserStates(StatesGroup):
    language_selection = State()
    main_menu = State()


# Database setup
def setup_db():
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_data (
        user_id INTEGER PRIMARY KEY,
        chosen_language TEXT
    )
    ''')
    conn.commit()
    conn.close()


def get_user_language(user_id):
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT chosen_language FROM user_data WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None


def save_user_language(user_id, language):
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO user_data (user_id, chosen_language) VALUES (?, ?)",
                   (user_id, language))
    conn.commit()
    conn.close()


# Multilingual content
texts = {
    "ru": {
        "welcome": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! üåø\n\n"
                   "–í—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –±–æ—Ç–æ–º –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Ilmli Uzbek. –ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –≤–∞–∂–µ–Ω, –∞ –∫–∞–∂–¥–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ –±–µ—Å—Ü–µ–Ω–Ω–æ. "
                   "–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–±—Ä–æ—Ç–∞ –∏ –º–∏–ª–æ—Å–µ—Ä–¥–∏–µ —Å–ø–æ—Å–æ–±–Ω—ã –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –º–∏—Ä, –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏!\n\n"
                   "üåü Ilmli Uzbek ‚Äì –ú–µ–Ω—è–µ–º –º–∏—Ä —á–µ—Ä–µ–∑ –º–∏–ª–æ—Å–µ—Ä–¥–∏–µ!\n\n"
                   "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è:",
        "welcome_back": "üåü –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –û—á–µ–Ω—å —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –í–º–µ—Å—Ç–µ –∫ –¥–æ–±—Ä—É –∏ —Å–≤–µ—Ç—É! ‚ú®\n\n"
                        "–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–±—Ä–æ—Ç–∞ –∏ –º–∏–ª–æ—Å–µ—Ä–¥–∏–µ —Å–ø–æ—Å–æ–±–Ω—ã –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –º–∏—Ä, –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏!\n\n"
                        "üåü Ilmli Uzbek ‚Äì –ú–µ–Ω—è–µ–º –º–∏—Ä —á–µ—Ä–µ–∑ –º–∏–ª–æ—Å–µ—Ä–¥–∏–µ!\n\n",
        "language_selected": "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.",
        "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        "about_us": "–û –Ω–∞—Å",
        "donate": "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å",
        "contact": "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",
        "back": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        "about_us_text": "üìå –ö–æ—Ä–æ—Ç–∫–æ –æ –Ω–∞—Å\n\n"
                         "–ü—Ä–æ–µ–∫—Ç Ilmli Uzbek –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ 2024 –≥–æ–¥–∞.\n"
                         "–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî –ø—Ä–æ–±—É–∂–¥–∞—Ç—å –≤ –ª—é–¥—è—Ö –¥–æ–±—Ä–æ—Ç—É –∏ –º–∏–ª–æ—Å–µ—Ä–¥–∏–µ, —Å–æ–∑–¥–∞–≤–∞—è –∫—É–ª—å—Ç—É—Ä—É –∑–∞–±–æ—Ç—ã –∏ –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏ –≤ –æ–±—â–µ—Å—Ç–≤–µ. "
                         "–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–º–æ—â—å, –∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–º –∫ –¥—Ä—É–≥–∏–º. "
                         "–í–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ –º—ã –≤–µ—Ä–∏–º, —á—Ç–æ –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –º–∏—Ä –∫ –ª—É—á—à–µ–º—É! üåø\n\n"
                         "üìä Ilmli Uzbek –≤ —Ü–∏—Ñ—Ä–∞—Ö\n\n"
                         "üí∞ –ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —É–∂–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–æ –±–æ–ª–µ–µ 20 000 000 —Å—É–º. –ò —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–π —â–µ–¥—Ä–æ—Å—Ç–∏ –∏ –¥–æ–≤–µ—Ä–∏—è!\n\n"
                         "üë• –°–µ–π—á–∞—Å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ 25 –Ω–µ—Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã—Ö —á–µ–ª–æ–≤–µ–∫, –Ω–æ –º—ã —Ö–æ—Ç–∏–º —Ä–∞—Å—Ç–∏ –¥–∞–ª—å—à–µ, –ø—Ä–∏–≥–ª–∞—à–∞—è –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏ –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ!\n\n"
                         "–í–º–µ—Å—Ç–µ –Ω–∞–ø–æ–ª–Ω–∏–º –º–∏—Ä –¥–æ–±—Ä–æ–º –∏ –º–∏–ª–æ—Å–µ—Ä–¥–∏–µ–º! ‚ú®",
        "donate_text": "üå± –õ—é–±–∞—è –≤–∞—à–∞ –ø–æ–º–æ—â—å, –¥–∞–∂–µ —Å–∞–º—ã–π —Å–∫—Ä–æ–º–Ω—ã–π –≤–∫–ª–∞–¥, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–µ—Ä–Ω–æ–º, –ø—Ä–æ—Ä–∞—Å—Ç–∞—é—â–∏–º –≤–æ —Å—Ç–æ –∫—Ä–∞—Ç! "
                       "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π —Å—É–º, –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –≤–∞–º–∏, –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ –≤–∞–º –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ, –ø—Ä–∏–Ω–æ—Å—è –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏–µ –∏ –±–ª–∞–≥–æ!\n\n"
                       "üí≥ 5614 6812 5610 0490 ‚Äì Abdullayev Behruz\n"
                       "üí≥ 9860 1701 1462 2237 ‚Äì Sultanbek Azimov",
        "contact_text": "ü§ù –•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –±–æ–ª—å—à–æ–π –∏ –¥–æ–±—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏? –ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É, –∏ –Ω–µ –≤–∞–∂–Ω–æ, "
                        "–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π —ç—Ç–æ –≤–∫–ª–∞–¥ –∏–ª–∏ –ª–∏—á–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ ‚Äì –∫–∞–∂–¥–æ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ –¥–æ–±—Ä–∞ —Ü–µ–Ω–Ω–æ –¥–ª—è –Ω–∞—Å!\n\n"
                        "üì© –ü–∏—à–∏—Ç–µ –Ω–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n"
                        "‚Ä¢ @sultnavw\n"
                        "‚Ä¢ @abdlv_bekhruz\n"
                        "‚Ä¢ @ab177771"
    },
    "uz": {
        "welcome": "Assalomu alaykum, xush kelibsiz! üåø\n\n"
                   "Siz hozir Ilmli Uzbek xayriya loyihasining botidasiz. Bu yerda har bir inson qadrlanadi, har bir ezgu ish esa ulkan ahamiyatga ega. "
                   "Biz mehr orqali dunyoni yaxshilik sari o'zgartiramiz va siz bilan birga bunga erishamiz deb umid qilamiz!\n\n"
                   "üåü Ilmli Uzbek ‚Äì Mehr bilan dunyoni o'zgartiramiz!\n\n"
                   "Sizga muloqot qilish qulay bo'lgan tilni tanlang:",
        "welcome_back": "üåü Assalomu alaykum! Sizni yana ko'rganimizdan juda mamnunmiz! Birga yaxshilik sari! ‚ú®\n\n"
                        "Biz mehr orqali dunyoni yaxshilik sari o'zgartiramiz va siz bilan birga bunga erishamiz deb umid qilamiz!\n\n"
                        "üåü Ilmli Uzbek ‚Äì Mehr bilan dunyoni o'zgartiramiz!\n\n",
        "language_selected": "Siz o'zbek tilini tanladingiz.",
        "main_menu": "Asosiy menyu:",
        "about_us": "Biz haqimizda",
        "donate": "Ehson qilish",
        "contact": "Bog'lanish",
        "back": "Menyuga qaytish",
        "about_us_text": "üìå Biz haqimizda qisqacha\n\n"
                         "Ilmli Uzbek loyihasi 2024-yil boshida tashkil etilgan.\n"
                         "Biz inson qalbidagi yaxshilik va mehrni uyg'otib, jamiyatda haqiqiy ezgulik madaniyatini shakllantirishga harakat qilamiz. "
                         "Bizning vazifamiz faqatgina yordam berish emas, balki har bir insonning qalbida boshqa insonlarga muhabbat va mehr uyg'otishdir. "
                         "Siz bilan birga bu dunyoni yaxshilik sari o'zgartira olishimizga ishonamiz! üåø\n\n"
                         "üìä Ilmli Uzbek raqamlarda\n\n"
                         "üí∞ Bugungacha 20 000 000 so'mdan ortiq mablag' ehson qilindi. Bu ‚Äì har biringizning ishonch va mehringiz natijasidir.\n\n"
                         "üë• Bizning safimizda ayni paytda 25 nafar mehribon inson bor, ammo biz siz bilan yanada kattaroq va yanada ta'sirli jamoaga aylanishni xohlaymiz!\n\n"
                         "Birga bo'lsak, dunyoni yaxshilikka to'ldira olamiz! ‚ú®",
        "donate_text": "üå± Sizning har bir ehsoningiz, har bir kichik xayringiz yuzlab barobar hosil beruvchi yaxshilik urug'iga aylanadi! "
                       "Qilgan xayr-saxovatingiz o'zingizga ko'payib, rizqingiz kengaysin, yaxshiliklaringiz ko'paysin!\n\n"
                       "üí≥ 5614 6812 5610 0490 ‚Äì Abdullayev Behruz\n"
                       "üí≥ 9860 1701 1462 2237 ‚Äì Sultanbek Azimov",
        "contact_text": "ü§ù Katta va xayrli hikoyamizning bir qismiga aylanishni istaysizmi? Biz hamkorlik uchun doimo ochiqmiz! "
                        "Moddiy yoki amaliy yordam ‚Äî har qanday ko'rinishdagi ko'mak biz uchun bebaho.\n\n"
                        "üì© Bizga bog'laning:\n"
                        "‚Ä¢ @sultnavw\n"
                        "‚Ä¢ @abdlv_bekhruz\n"
                        "‚Ä¢ @ab177771"
    }
}


def get_main_menu_keyboard(language):
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text=texts[language]["about_us"])
    keyboard.button(text=texts[language]["donate"])
    keyboard.button(text=texts[language]["contact"])
    keyboard.adjust(1)
    return keyboard.as_markup(resize_keyboard=True)


def get_back_keyboard(language):
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text=texts[language]["back"])
    return keyboard.as_markup(resize_keyboard=True)


# Create a router
router = Router()


# Handler for start command
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    # Clear previous state
    await state.clear()

    # Check if user already has a language preference
    user_id = message.from_user.id
    language = get_user_language(user_id)

    if language:
        # User already has a language preference, show welcome back message
        await message.answer(
            texts[language]["welcome_back"],
            reply_markup=get_main_menu_keyboard(language)
        )
        await state.set_state(UserStates.main_menu)
    else:
        # New user, show language selection
        keyboard = ReplyKeyboardBuilder()
        keyboard.button(text="–†—É—Å—Å–∫–∏–π üá∑üá∫")
        keyboard.button(text="O'zbekcha üá∫üáø")
        keyboard.adjust(2)

        # Get welcome message - first line only to keep it short for the initial greeting
        ru_welcome = texts["ru"]["welcome"].split("\n")[0]
        uz_welcome = texts["uz"]["welcome"].split("\n")[0]

        # Send welcome message with language options
        await message.answer(f"{ru_welcome}\n{uz_welcome}", reply_markup=keyboard.as_markup(resize_keyboard=True))
        await state.set_state(UserStates.language_selection)


# Handler for language selection
@router.message(UserStates.language_selection)
async def process_language(message: Message, state: FSMContext):
    language = None

    if message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫":
        language = "ru"
    elif message.text == "O'zbekcha üá∫üáø":
        language = "uz"
    else:
        # Invalid selection, ask again
        keyboard = ReplyKeyboardBuilder()
        keyboard.button(text="–†—É—Å—Å–∫–∏–π üá∑üá∫")
        keyboard.button(text="O'zbekcha üá∫üáø")
        keyboard.adjust(2)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos, tilni tanlang:",
                             reply_markup=keyboard.as_markup(resize_keyboard=True))
        return

    # Save user's language preference
    user_id = message.from_user.id
    save_user_language(user_id, language)

    # Notify user about the selection
    await message.answer(texts[language]["language_selected"])

    # Show main menu
    await message.answer(
        texts[language]["main_menu"],
        reply_markup=get_main_menu_keyboard(language)
    )
    await state.set_state(UserStates.main_menu)


# Handler for main menu
@router.message(UserStates.main_menu)
async def process_main_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = get_user_language(user_id)

    if not language:
        # If language is not set (which shouldn't happen), restart
        await cmd_start(message, state)
        return

    if message.text == texts[language]["about_us"]:
        # Send About Us information with image
        try:
            photo = FSInputFile('about_us.jpg')
            await message.answer_photo(
                photo=photo,
                caption=texts[language]["about_us_text"],
                reply_markup=get_back_keyboard(language)
            )
        except FileNotFoundError:
            # If image not found, just send the text
            await message.answer(
                texts[language]["about_us_text"],
                reply_markup=get_back_keyboard(language)
            )

    elif message.text == texts[language]["donate"]:
        # Send donation information
        await message.answer(
            texts[language]["donate_text"],
            reply_markup=get_back_keyboard(language)
        )

    elif message.text == texts[language]["contact"]:
        # Send contact information
        await message.answer(
            texts[language]["contact_text"],
            reply_markup=get_back_keyboard(language)
        )

    elif message.text == texts[language]["back"]:
        # Return to main menu
        await message.answer(
            texts[language]["main_menu"],
            reply_markup=get_main_menu_keyboard(language)
        )

    else:
        # Handle unexpected input
        await message.answer(
            texts[language]["main_menu"],
            reply_markup=get_main_menu_keyboard(language)
        )


# Handler for language command
@router.message(Command("language"))
async def cmd_change_language(message: Message, state: FSMContext):
    # Show language selection regardless of current state
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="–†—É—Å—Å–∫–∏–π üá∑üá∫")
    keyboard.button(text="O'zbekcha üá∫üáø")
    keyboard.adjust(2)

    # Get bilingual message
    ru_message = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    uz_message = "Tilni tanlang:"

    # Send message with language options
    await message.answer(f"{ru_message}\n{uz_message}", reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(UserStates.language_selection)


async def ensure_about_us_image():
    try:
        from PIL import Image, ImageDraw, ImageFont

        # Check if about_us.jpg needs to be created or resized
        if not os.path.exists('about_us.jpg'):
            # Use the provided image if available
            if os.path.exists('attached_assets/_DSC4241.JPG'):
                # Open and resize the image instead of just copying
                img = Image.open('attached_assets/_DSC4241.JPG')
                # Resize to a reasonable size (max 1600px width, maintain aspect ratio)
                max_width = 1600
                if img.width > max_width:
                    ratio = max_width / img.width
                    new_height = int(img.height * ratio)
                    img = img.resize((max_width, new_height), Image.LANCZOS)
                # Save with reduced quality to keep file size small
                img.save('about_us.jpg', quality=85, optimize=True)
                logging.info("Using resized image as about_us.jpg")
            else:
                # Create a text-based image if no image is available
                img = Image.new('RGB', (800, 400), color=(73, 109, 137))
                d = ImageDraw.Draw(img)

                # Add some text
                d.text((10, 10), "Ilmli Uzbek", fill=(255, 255, 0))
                d.text((10, 50), "Charity Project", fill=(255, 255, 0))

                # Save the image
                img.save('about_us.jpg')
                logging.info("Created a default about_us.jpg image")
    except ImportError:
        logging.warning("PIL not installed, cannot create or resize image")
        if not os.path.exists('about_us.jpg') and os.path.exists('attached_assets/_DSC4241.JPG'):
            import shutil
            shutil.copy('attached_assets/_DSC4241.JPG', 'about_us.jpg')
            logging.warning("Copied image without resizing - may be too large for Telegram")


async def main():
    # Setup database
    setup_db()
    await ensure_about_us_image()

    # Initialize bot and dispatcher
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()

    # Include the router in the dispatcher
    dp.include_router(router)

    # Start polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())